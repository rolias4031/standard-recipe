// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// standard recipe models, in order of parent - child

model Recipe {
  id           String        @id @default(cuid())
  name         String        @unique
  description  String?       @db.VarChar(500)
  status       RecipeStatus  @default(draft)
  instructions Instruction[]
  ingredients  Ingredient[]
  equipment    Equipment[]
  images       RecipeImage[]
  authorId     String
  favorites    Favorite[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // version control relations
  parent   Recipe?  @relation("parent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String?
  forks    Recipe[] @relation("parent")
}

model Favorite {
  id       String @id @default(cuid())
  userId   String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String
}

model Instruction {
  id          String  @id @default(cuid())
  order       Int
  description String  @db.VarChar(500)
  optional    Boolean @default(false)
  recipe      Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId    String
}

model Equipment {
  id       String  @id @default(cuid())
  name     String
  notes    String? @db.VarChar(250)
  recipe   Recipe  @relation(fields: [recipeId], references: [id])
  recipeId String
  optional Boolean @default(false)
}

model Ingredient {
  id               String           @id @default(cuid())
  quantity         Float
  optional         Boolean          @default(false)
  recipe           Recipe           @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId         String
  unit             IngredientUnit   @relation(fields: [ingredientUnitId], references: [id])
  ingredientUnitId String
  name             IngredientName   @relation(fields: [ingredientNameId], references: [id])
  ingredientNameId String
  notes            String?          @db.VarChar(250)
  substitutes      IngredientName[] @relation("substitutes")
}

model IngredientUnit {
  id           String       @id @default(cuid())
  unit         String       @unique
  abbreviation String
  description  String
  property     UnitProperty @default(mass)
  ingredients  Ingredient[]
}

model IngredientName {
  id            String       @id @default(cuid())
  name          String       @unique
  ingredients   Ingredient[]
  substituteFor Ingredient[] @relation("substitutes")
  // potentially add a type field
}

model RecipeImage {
  id       String @id @default(cuid())
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String
  url      String
}

enum UnitProperty {
  mass
  volume
  weight
  density
  temperature
  pressure
  other
}

enum RecipeStatus {
  draft
  archived
  published
}
